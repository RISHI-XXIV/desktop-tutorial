#include <GL/glut.h>
#include <vector>
#include <iostream>

const int WIDTH = 800, HEIGHT = 800;
std::vector<std::pair<float, float>> polygon;
bool scale = false;

void setupViewport() {
    glViewport(0, 0, WIDTH, HEIGHT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-WIDTH/2, WIDTH/2, -HEIGHT/2, HEIGHT/2, -1, 1);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void drawAxes() {
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);
    glVertex2f(-WIDTH/2, 0); glVertex2f(WIDTH/2, 0);
    glVertex2f(0, -HEIGHT/2); glVertex2f(0, HEIGHT/2);
    glEnd();
}

void drawPolygon(const std::vector<std::pair<float, float>>& pts, float r, float g, float b) {
    glBegin(GL_LINE_LOOP);
    glColor3f(r, g, b);
    for (const auto& p : pts) {
        glVertex2f(p.first, p.second);
    }
    glEnd();
}

void scalePolygon(const std::vector<std::pair<float, float>>& pts, float sx, float sy) {
    std::vector<std::pair<float, float>> scaled;
    for (const auto& p : pts) {
        float x_new = p.first * sx;
        float y_new = p.second * sy;
        scaled.push_back({x_new, y_new});
    }
    drawPolygon(scaled, 1.0f, 0.0f, 0.0f);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();
    if (polygon.size() >= 3) {
        drawPolygon(polygon, 0.0f, 1.0f, 0.0f);
        if (scale) {
            scalePolygon(polygon, 2.0f, 2.0f); // Scale by 2x
        }
    }
    glutSwapBuffers();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        float xpos = x - WIDTH/2;
        float ypos = HEIGHT/2 - y;
        polygon.push_back({xpos, ypos});
        glutPostRedisplay();
    }
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 's' || key == 'S') {
        scale = true;
        glutPostRedisplay();
    }
    else if (key == 'c' || key == 'C') {
        polygon.clear();
        scale = false;
        glutPostRedisplay();
    }
    else if (key == 'q' || key == 'Q') {
        exit(0);
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("2D Scaling");
    setupViewport();
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}