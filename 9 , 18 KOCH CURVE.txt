#include <GL/glut.h>
#include <vector>
#include <cmath>
#include <iostream>

const int WIDTH = 800, HEIGHT = 800;
std::vector<std::pair<float, float>> points;
int depth = 0;

void setupViewport() {
    glViewport(0, 0, WIDTH, HEIGHT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-WIDTH/2, WIDTH/2, -HEIGHT/2, HEIGHT/2, -1, 1);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void drawAxes() {
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);
    glVertex2f(-WIDTH/2, 0); glVertex2f(WIDTH/2, 0);
    glVertex2f(0, -HEIGHT/2); glVertex2f(0, HEIGHT/2);
    glEnd();
}

void drawKochCurve(float x1, float y1, float x2, float y2, int n) {
    if (n == 0) {
        glBegin(GL_LINES);
        glVertex2f(x1, y1);
        glVertex2f(x2, y2);
        glEnd();
        return;
    }
    float dx = (x2 - x1) / 3;
    float dy = (y2 - y1) / 3;
    float x3 = x1 + dx;
    float y3 = y1 + dy;
    float x5 = x1 + 2 * dx;
    float y5 = y1 + 2 * dy;
    float x4 = x3 + dx * cos(M_PI / 3) - dy * sin(M_PI / 3);
    float y4 = y3 + dx * sin(M_PI / 3) + dy * cos(M_PI / 3);
    drawKochCurve(x1, y1, x3, y3, n - 1);
    drawKochCurve(x3, y3, x4, y4, n - 1);
    drawKochCurve(x4, y4, x5, y5, n - 1);
    drawKochCurve(x5, y5, x2, y2, n - 1);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();
    glColor3f(1.0f, 0.0f, 0.0f);
    if (points.size() == 2) {
        drawKochCurve(points[0].first, points[0].second, points[1].first, points[1].second, depth);
    }
    glutSwapBuffers();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        float xpos = x - WIDTH/2;
        float ypos = HEIGHT/2 - y;
        points.push_back({xpos, ypos});
        if (points.size() > 2) points.resize(2);
        glutPostRedisplay();
    }
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 'd' || key == 'D') {
        depth = std::min(depth + 1, 5);
        glutPostRedisplay();
    }
    else if (key == 'c' || key == 'C') {
        points.clear();
        depth = 0;
        glutPostRedisplay();
    }
    else if (key == 'q' || key == 'Q') {
        exit(0);
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("Koch Curve");
    setupViewport();
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}