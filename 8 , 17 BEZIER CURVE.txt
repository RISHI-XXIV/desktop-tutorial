#include <GL/glut.h>
#include <vector>
#include <cmath>
#include <iostream>

const int WIDTH = 800, HEIGHT = 800;
std::vector<std::pair<float, float>> controlPoints;
int depth = 0;

void setupViewport() {
    glViewport(0, 0, WIDTH, HEIGHT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-WIDTH/2, WIDTH/2, -HEIGHT/2, HEIGHT/2, -1, 1);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void drawAxes() {
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);
    glVertex2f(-WIDTH/2, 0); glVertex2f(WIDTH/2, 0);
    glVertex2f(0, -HEIGHT/2); glVertex2f(0, HEIGHT/2);
    glEnd();
}

void drawBezierPoint(float t, float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3) {
    float x = pow(1-t, 3) * x0 + 3 * pow(1-t, 2) * t * x1 + 3 * (1-t) * t * t * x2 + t * t * t * x3;
    float y = pow(1-t, 3) * y0 + 3 * pow(1-t, 2) * t * y1 + 3 * (1-t) * t * t * y2 + t * t * t * y3;
    glVertex2f(x, y);
}

void drawBezierCurve(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3, int n) {
    if (n == 0) {
        glBegin(GL_LINE_STRIP);
        glColor3f(1.0f, 0.0f, 0.0f);
        for (float t = 0; t <= 1; t += 0.01) {
            drawBezierPoint(t, x0, y0, x1, y1, x2, y2, x3, y3);
        }
        glEnd();
        return;
    }
    // Subdivide: compute midpoints
    float x01 = (x0 + x1) / 2, y01 = (y0 + y1) / 2;
    float x12 = (x1 + x2) / 2, y12 = (y1 + y2) / 2;
    float x23 = (x2 + x3) / 2, y23 = (y2 + y3) / 2;
    float x012 = (x01 + x12) / 2, y012 = (y01 + y12) / 2;
    float x123 = (x12 + x23) / 2, y123 = (y12 + y23) / 2;
    float xm = (x012 + x123) / 2, ym = (y012 + y123) / 2;
    // Recursive calls
    drawBezierCurve(x0, y0, x01, y01, x012, y012, xm, ym, n - 1);
    drawBezierCurve(xm, ym, x123, y123, x23, y23, x3, y3, n - 1);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();
    if (controlPoints.size() == 4) {
        drawBezierCurve(controlPoints[0].first, controlPoints[0].second,
                        controlPoints[1].first, controlPoints[1].second,
                        controlPoints[2].first, controlPoints[2].second,
                        controlPoints[3].first, controlPoints[3].second, depth);
    }
    glutSwapBuffers();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        float xpos = x - WIDTH/2;
        float ypos = HEIGHT/2 - y;
        controlPoints.push_back({xpos, ypos});
        if (controlPoints.size() > 4) controlPoints.resize(4);
        glutPostRedisplay();
    }
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 'd' || key == 'D') {
        depth = std::min(depth + 1, 3);
        glutPostRedisplay();
    }
    else if (key == 'c' || key == 'C') {
        controlPoints.clear();
        depth = 0;
        glutPostRedisplay();
    }
    else if (key == 'q' || key == 'Q') {
        exit(0);
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("Bezier Curve Fractal");
    setupViewport();
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}